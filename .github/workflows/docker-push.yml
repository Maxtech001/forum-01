name: Deploy to K3s

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: self-hosted

    env:
      IMAGE_NAME: maxtech470/project101
      K8S_NAMESPACE: forum
      MY_SECRET_CODE: ${{ secrets.MY_SECRET_CODE }}
      COMMIT_TAG: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up JDK 17 (for Nexus)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Go tests and generate coverage report
        run: go test ./... -coverprofile=coverage.out

      - name: Build Go binary
        run: |
          mkdir -p dist
          go build -o dist/forum-docker .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${IMAGE_NAME}:${COMMIT_TAG} .

      - name: Push Docker image
        run: |
          docker push ${IMAGE_NAME}:${COMMIT_TAG}

      - name: Deploy app manifests to K3s
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml
          kubectl version --client
          kubectl config current-context || echo "No current context set"

          # Create namespace if it doesn't exist
          kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}

          # Find a free NodePort between 30000-32767
          USED_PORTS=$(kubectl get svc --all-namespaces -o jsonpath='{.items[*].spec.ports[*].nodePort}' | tr ' ' '\n' | sort -n | uniq)
          find_free_port() {
            for port in $(seq 30000 32767); do
              if ! echo "$USED_PORTS" | grep -qx "$port"; then
                echo "$port"
                return
              fi
            done
            echo "No free nodePort available!" >&2
            exit 1
          }
          NODE_PORT=$(find_free_port)
          echo "Using NodePort: $NODE_PORT"

          # Apply Deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: project101
            namespace: ${K8S_NAMESPACE}
            labels:
              app: project101
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: project101
            template:
              metadata:
                labels:
                  app: project101
              spec:
                containers:
                  - name: project101
                    image: ${IMAGE_NAME}:${COMMIT_TAG}
                    ports:
                      - containerPort: 8080
                    env:
                      - name: MY_SECRET_CODE
                        value: "${MY_SECRET_CODE}"
          EOF

          # Apply Service with dynamic NodePort
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: project101-service
            namespace: ${K8S_NAMESPACE}
          spec:
            selector:
              app: project101
            type: NodePort
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
                nodePort: $NODE_PORT
          EOF

          # Apply Ingress
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: project101-ingress
            namespace: ${K8S_NAMESPACE}
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            ingressClassName: nginx
            rules:
              - http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: project101-service
                          port:
                            number: 80
          EOF
