name: Build, Push, and Deploy to K3s

on:
  push:
    branches: [master]

jobs:
  build-deploy:
    runs-on: self-hosted

    env:
      IMAGE_NAME: maxtech470/project101
      K8S_NAMESPACE: forum
      MY_SECRET_CODE: ${{ secrets.MY_SECRET_CODE }}
      COMMIT_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up JDK 17 (required for Nexus step)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Go tests and generate coverage report
        run: |
          go test ./... -coverprofile=coverage.out

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${COMMIT_TAG} .
          docker tag $IMAGE_NAME:${COMMIT_TAG} $IMAGE_NAME:latest

      - name: Push Docker images
        run: |
          docker push $IMAGE_NAME:${COMMIT_TAG}
          docker push $IMAGE_NAME:latest

      - name: Build Go binary
        run: |
          mkdir -p dist
          go build -o dist/forum-docker .

      - name: Upload artifact to Nexus
        run: |
          curl -v -u "${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASSWORD }}" \
          --upload-file dist/forum-docker \
          "http://localhost:8081/repository/go-artifacts/forum-docker-${COMMIT_TAG}"

      - name: Deploy app manifests to K3s
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=$PWD/kubeconfig.yaml
          kubectl version --client
          kubectl config current-context

          # Create namespace if it doesn't exist
          kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}

          # Apply Deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: project101
            namespace: ${K8S_NAMESPACE}
            labels:
              app: project101
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: project101
            template:
              metadata:
                labels:
                  app: project101
              spec:
                containers:
                  - name: project101
                    image: ${IMAGE_NAME}:${COMMIT_TAG}
                    ports:
                      - containerPort: 8080
          EOF

          # Apply Service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: project101-service
            namespace: ${K8S_NAMESPACE}
          spec:
            selector:
              app: project101
            type: NodePort
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
                nodePort: 30776
          EOF
